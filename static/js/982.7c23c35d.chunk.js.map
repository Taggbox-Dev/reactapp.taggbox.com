{"version":3,"file":"static/js/982.7c23c35d.chunk.js","mappings":"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","sources":["Layouts/Header/Components/Elements/Notifications.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Tab, Nav } from 'react-bootstrap';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Link } from 'react-router-dom';\nimport { baseUrl } from '../../../../Assets/AssetsHelper';\nimport { getNotificationList, notificationUpdateStatus } from '../../../../Services/Actions/homeActions'\n\nclass Notifications extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { notifications: props.notificationList }\n    }\n    // componentWillMount() {\n    //    // this.onLoad()\n    // }\n    // onLoad = () => {\n    //     var self = this;\n    //     getNotificationList().then((response) => {\n    //         const { notifications } = response.data.responseData;\n    //         if (notifications && notifications.length > 0) {\n    //             var data = {}\n    //             notifications.map((item) => {\n    //                 if (data[moment(new Date(item.message.time * 1000)).fromNow()]) {\n\n    //                     if (!data[moment(new Date(item.message.time * 1000)).fromNow()].includes(item.id)) {\n    //                         data[moment(new Date(item.message.time * 1000)).fromNow()].push(item)\n    //                     }\n\n    //                 }\n    //                 else {\n    //                     data[moment(new Date(item.message.time * 1000)).fromNow()] = [item]\n    //                 }\n\n    //             })\n    //             if (notifications && notifications.length > 0 && notifications.filter((a) => a.status == 1).length > 0) {\n    //                 let notificationCount = document.getElementById(\"notificationCount\");\n    //                 if (notifications.filter((a) => a.status == 0).length > 0) {\n    //                     notificationCount.style.display = 'block';\n    //                     notificationCount.innerText = notifications.filter((a) => a.status == 0).length;\n    //                 }\n    //             }\n    //             self.setState({ notifications: data })\n    //         }\n    //     })\n    // }\n\n    updateStatus = (postId, status) => event => {\n        var self = this;\n        notificationUpdateStatus(postId, status).then((response) => {\n            self.onLoad()\n        })\n    }\n\n    render() {\n        const { notifications } = this.state;\n\n        return <div className=\"w-100\">\n            <Tab.Container id=\"notifications_tab_panel\" defaultActiveKey=\"all-notifications\">\n                <div className=\"d-flex align-items-center justify-content-between px-3 pt-2 border-bottom\">\n                    <Nav variant=\"default\" className=\"nav\">\n                        <Nav.Item className=\"\">\n                            <Nav.Link className=\"me-3 px-0\" eventKey=\"all-notifications\">All</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item className=\"\">\n                            <Nav.Link className=\"px-0\" eventKey=\"unread-notifications\">Unread</Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n                    <div>\n                        <button type=\"button\" className=\"btn btn-link btn-sm px-0 h-auto fw-bold text-decoration-none btn-active-color-primary\">Mark all as read</button>\n                    </div>\n                </div>\n                <PerfectScrollbar>\n                    {notifications && Object.keys(notifications).length > 0 ? <Tab.Content>\n                        <Tab.Pane eventKey=\"all-notifications\" className=\"pb-3\">\n                            {\n                                notifications && Object.keys(notifications).map((iNot, index) => {\n                                    return <><div className=\"d-flex align-items-center justify-content-between px-3 py-1\">\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{(notifications[iNot] && notifications[iNot].length > 0) ? notifications[iNot].length : 0}</span>\n                                    </div>\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\n\n                                            {\n                                                notifications[iNot].map((imNot) => {\n                                                    return <div key={imNot.id} className={`px-3 d-flex align-items-start border-bottom notification-item  ${imNot.status == 0 ? `bg-light` : ``}`}>\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\n                                                            <img alt=\"Pic\" src={baseUrl(\"media/icons/social-icons/twitter.svg\")} height=\"40\" width=\"40\" />\n                                                        </div>\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\n                                                                <Link to={'/home'} className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</Link>\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\n                                                            </div>\n                                                            <div className=\"d-flex algin-items-start\">\n                                                                <span className=\"text-gray-600 fs-9\">\n                                                                    {imNot.message.text}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n\n                                                })\n                                            }\n\n                                        </div> : null}\n                                    </>\n\n                                })\n                            }\n                        </Tab.Pane>\n                        <Tab.Pane eventKey=\"unread-notifications\" className=\"pb-3\">\n                            {\n                                notifications && Object.keys(notifications).map((iNot, index) => {\n                                    return notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? <><div key={index} className=\"d-flex align-items-center justify-content-between px-3 py-1\">\n                                        <span className=\"text-gray-800 fw-bold\">{iNot}</span>\n                                        <span className=\"bg-primary badge rounded-5 min-w-30 text-light-alt d-none\">{notifications[iNot] && notifications[iNot].length > 0 && notifications[iNot].filter((a) => a.status == 0).length > 0 ? notifications[iNot].filter((a) => a.status == 0).length : 0}</span>\n                                    </div>\n                                        {notifications[iNot] && notifications[iNot].length > 0 ? <div className=\"\">\n\n                                            {\n                                                notifications[iNot].map((imNot) => {\n                                                    return imNot.status == 0 ? <div key={imNot.id} className=\"px-3 d-flex align-items-start border-bottom notification-item bg-light\" onClick={this.updateStatus(imNot.id, 1)}>\n                                                        <div className=\"symbol symbol-38 rounded-1 overflow-hidden me-2 bg-light p-2\">\n                                                            <img alt=\"Pic\" src={baseUrl(\"media/icons/social-icons/twitter.svg\")} height=\"40\" width=\"40\" />\n                                                        </div>\n                                                        <div className=\"d-flex align-items-start flex-column flex-grow-1\">\n                                                            <div className=\"d-flex algin-items-center justify-content-between w-100\">\n                                                                <Link to={'/home'} className=\"text-hover-primary text-gray-800 fw-bold text-decoration-none me-2\">{imNot.message.subject}</Link>\n                                                                <span className=\"text-gray-500 fs-9\">{moment(new Date(imNot.message.time * 1000)).format(\"hh:mma\")}</span>\n                                                            </div>\n                                                            <div className=\"d-flex algin-items-start\">\n                                                                <span className=\"text-gray-600 fs-9\">\n                                                                    {imNot.message.text}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </div> : null\n\n                                                })\n                                            }\n\n                                        </div> : null}\n                                    </> : null\n\n\n                                })\n                            }\n                        </Tab.Pane>\n                    </Tab.Content> : null}\n                </PerfectScrollbar>\n            </Tab.Container>\n        </div>\n    }\n}\n\nexport default Notifications"],"names":["Notifications","props","updateStatus","postId","status","event","self","notificationUpdateStatus","then","response","onLoad","state","notifications","notificationList","this","className","id","defaultActiveKey","variant","eventKey","type","Object","keys","length","map","iNot","index","imNot","alt","src","baseUrl","height","width","to","message","subject","moment","Date","time","format","text","filter","a","onClick","Component"],"sourceRoot":""}